// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Admin {
    id          String   @id @default(uuid())
    adminName   String
    email       String
    phoneNumber String
    username    String   @unique
    password    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model FarmerAccount {
    id        String    @id @default(uuid())
    username  String    @unique
    password  String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    Farmer    Farmer?
}

model Farmer {
    id                     String                   @id @default(uuid())
    accountId              String?                  @unique
    profile                String?
    phoneNumber            String                   @unique
    rsbsaNo                String                   @default("TEST")
    firstName              String
    middleName             String?
    lastName               String
    birthday               DateTime
    addressLineOne         String
    gender                 gender                   @default(MALE)
    civilStatus            civil_status             @default(SINGLE)
    spouse                 String?
    indigenous             Boolean                  @default(false)
    tribe                  String? //if indigenous
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime?                @updatedAt
    FarmerAccount          FarmerAccount?           @relation(fields: [accountId], references: [id])
    Farms                  Farm[]
    Distribution           Distribution[]
    FertilizerDistribution FertilizerDistribution[]
}

model Farm {
    id                   String              @id @default(uuid())
    isPublished          Boolean             @default(true)
    isFeatured           Boolean             @default(false)
    farmerId             String
    farmerCount          Int
    barangay             String
    address              String
    landArea             Float
    coordinates          Json // [{"lat": 14.605, "lng": 121.0}, {"lat": 14.606, "lng": 121.002}]
    land_category        String[]
    weather_risks        String[]
    source_of_irrigation String[]
    soil_type            String[]
    topography           String[]
    tenurial_status      String[]
    createdAt            DateTime            @default(now())
    updatedAt            DateTime?           @updatedAt
    Farmer               Farmer              @relation(fields: [farmerId], references: [id])
    FarmImage            FarmImage[]
    FarmFarmingMethod    FarmFarmingMethod[]
    FarmWeatherRisk      FarmWeatherRisk[]
}

enum weather_risks {
    MD //Moderate Drought
    FD //Flood Prone
}

enum land_category {
    IR //Irrigated
    RF //Rain fed
    UL //Upland
}

//If land category is Irrigated
enum source_of_irrigation {
    NIA_CIS //National Irrigation Administration
    DW //Deep Well
    SWIP //Small water impounding project
    STW //Shallow tube well
}

enum soil_type {
    CL //Clay Loam
    SCL //Silty Clay Loam
    SiL //Silty Loam
    SaL //Sandy Loam
}

enum topography {
    FLAT
    ROLLING
    HILLY
}

enum tenurial_status {
    OWNER
    LESSEE
    TENANT
}

enum gender {
    MALE
    FEMALE
}

enum civil_status {
    SINGLE
    MARRIED
    WIDOW
    LEGALLY_SEPARATED
    ANNULED
}

model Crop {
    id                   String         @id @default(uuid())
    title                String
    variety              String //example NSIC Rc 222, NSIC Rc 160
    code                 String?
    source               String
    releaseAt            DateTime
    season               String[] //Dry Season, Wet Season
    establishment        String[] //Transplanted, Direct Wet Seeded, Direct Dry Seeded
    environment          String[] //Irrigated Lowland, Rainfed Lowland, Cool Elevated, Upland, Saline
    seed_classification  String //Inbred, Hybrid, Special Rice, Glutinous
    createdAt            DateTime       @default(now())
    updatedAt            DateTime?      @updatedAt
    Distribution         Distribution[]
}

model Fertilizer {
    id                     String                   @id @default(uuid())
    type                   String //Synthetic Fertilizer, Organic Fertilizer
    name                   String
    FertilizerDistribution FertilizerDistribution[]
}

model FertilizerDistribution {
    id            String     @id @default(uuid())
    farmerDetails String
    farmerId      String
    dateGiven     DateTime
    quantity      Float
    unit          UnitType   @default(KG)
    Farmer        Farmer     @relation(fields: [farmerDetails], references: [id])
    Fertilizer    Fertilizer @relation(fields: [farmerId], references: [id])
    createdAt     DateTime   @default(now())
    updatedAt     DateTime?  @updatedAt
}

model Distribution {
    id        String           @id @default(uuid())
    farmerId  String
    cropId    String
    dateGiven DateTime
    type      DistributionType //SEED, SEEDLING
    quantity  Float
    unit      UnitType         @default(KG)
    Farmer    Farmer           @relation(fields: [farmerId], references: [id])
    Crop      Crop             @relation(fields: [cropId], references: [id])
    createdAt DateTime         @default(now())
    updatedAt DateTime?        @updatedAt
    Planting  Planting[]
}

model Planting {
    id                  String       @id @default(uuid())
    distributionId      String
    establishmentTypeId Int
    dateOfSowing        DateTime
    dateOfTransplant    DateTime?
    expectedHarvestDate DateTime
    actualHarvestDate   DateTime?
    plantedArea         Float? // hectares
    moistureContent     Float? // e.g., 22.5 (percent)
    plantedQuantity     Float //kg
    harvestedQuantity   Float?
    harvestedUnit       UnitType?    @default(KG)
    Distribution        Distribution @relation(fields: [distributionId], references: [id])
}

model FarmFarmingMethod {
    farmId          String
    farmingMethodId Int
    Farm            Farm          @relation(fields: [farmId], references: [id])
    FarmingMethod   FarmingMethod @relation(fields: [farmingMethodId], references: [id])

    @@id([farmId, farmingMethodId])
}

model FarmWeatherRisk {
    farmId        String
    weatherRiskId Int
    Farm          Farm        @relation(fields: [farmId], references: [id])
    WeatherRisk   WeatherRisk @relation(fields: [weatherRiskId], references: [id])

    @@id([farmId, weatherRiskId])
}

model FarmImage {
    id         String   @id @default(uuid())
    farmId     String
    url        String
    caption    String?
    order      Int?
    isFeatured Boolean?
    createdAt  DateTime @default(now())
    Farm       Farm     @relation(fields: [farmId], references: [id])
}

model FarmingMethod {
    id   Int     @id @default(autoincrement())
    icon String?
    name String  @unique

    FarmFarmingMethod FarmFarmingMethod[]
}

model WeatherRisk {
    id   Int     @id @default(autoincrement())
    icon String?
    name String  @unique

    FarmWeatherRisk FarmWeatherRisk[]
}

enum DistributionType {
    SEED
    SEEDLING
}

enum UnitType {
    KG
    CAVAN
    MT
}
