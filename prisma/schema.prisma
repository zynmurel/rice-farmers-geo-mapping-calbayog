// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Admin {
    id          String   @id @default(uuid())
    adminName   String
    email       String
    phoneNumber String
    username    String   @unique
    password    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model FarmerAccount {
    id        String    @id @default(uuid())
    username  String    @unique
    password  String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    Farmer    Farmer?
}

model Farmer {
    id             String         @id @default(uuid())
    accountId      String?        @unique
    profile        String?
    phoneNumber    String         @unique
    rsbsaNo        String         @default("TEST")
    firstName      String
    middleName     String?
    lastName       String
    birthday       DateTime
    addressLineOne String
    gender         gender         @default(MALE)
    civilStatus    civil_status   @default(SINGLE)
    spouse         String?
    indigenous     Boolean        @default(false)
    tribe          String? //if indigenous
    createdAt      DateTime       @default(now())
    updatedAt      DateTime?      @updatedAt
    FarmerAccount  FarmerAccount? @relation(fields: [accountId], references: [id])
    Farms          Farm[]
}

model Farm {
    id                   String          @id @default(uuid())
    index                Int             @default(autoincrement())
    isPublished          Boolean         @default(true)
    isFeatured           Boolean         @default(false)
    farmerId             String
    farmerCount          Int
    barangay             String
    address              String
    landArea             Float
    coordinates          Json // [{"lat": 14.605, "lng": 121.0}, {"lat": 14.606, "lng": 121.002}]
    land_category        String[]
    weather_risks        String[]
    source_of_irrigation String[]
    soil_type            String[]
    topography           String[]
    tenurial_status      String[]
    createdAt            DateTime        @default(now())
    updatedAt            DateTime?       @updatedAt
    Farmer               Farmer          @relation(fields: [farmerId], references: [id])
    FarmImage            FarmImage[]

    Distribution Distribution[]
}

enum weather_risks {
    MD //Moderate Drought
    FD //Flood Prone
}

enum land_category {
    IR //Irrigated
    RF //Rain fed
    UL //Upland
}

//If land category is Irrigated
enum source_of_irrigation {
    NIA_CIS //National Irrigation Administration
    DW //Deep Well
    SWIP //Small water impounding project
    STW //Shallow tube well
}

enum soil_type {
    CL //Clay Loam
    SCL //Silty Clay Loam
    SiL //Silty Loam
    SaL //Sandy Loam
}

enum topography {
    FLAT
    ROLLING
    HILLY
}

enum tenurial_status {
    OWNER
    LESSEE
    TENANT
}

enum gender {
    MALE
    FEMALE
}

enum civil_status {
    SINGLE
    MARRIED
    WIDOW
    LEGALLY_SEPARATED
    ANNULED
}

model Crop {
    id                  String             @id @default(uuid())
    title               String
    variety             String //example NSIC Rc 222, NSIC Rc 160
    code                String?
    source              String
    daysOfSowing        Int                @default(110)
    releaseAt           DateTime
    season              String[] //Dry Season, Wet Season
    establishment       String[] //Transplanted, Direct Wet Seeded, Direct Dry Seeded
    environment         String[] //Irrigated Lowland, Rainfed Lowland, Cool Elevated, Upland, Saline
    seed_classification String //Inbred, Hybrid, Special Rice, Glutinous
    createdAt           DateTime           @default(now())
    updatedAt           DateTime?          @updatedAt
    CropDistribution    CropDistribution[]
}

model Fertilizer {
    id                     String                   @id @default(uuid())
    type                   String //Synthetic Fertilizer, Organic Fertilizer
    type2                  String                   @default("LIQUID") //Solid, Liquid
    type3                  String                   @default("NITROGEN_FERTILIZER") //...
    name                   String
    FertilizerDistribution FertilizerDistribution[]
}

model CropDistribution {
    id             Int              @id @default(autoincrement())
    cropId         String?
    distributionId String
    dateGiven      DateTime?
    quantity       Float
    type           DistributionType @default(SEED)
    unit           UnitType         @default(KG)
    Crop           Crop?             @relation(fields: [cropId], references: [id])
    Distribution   Distribution    @relation(fields: [distributionId], references: [id], onDelete: Cascade)
    Planting       Planting[]
}

model FertilizerDistribution {
    id             Int          @id @default(autoincrement())
    fertilizerId   String
    distributionId String
    dateGiven      DateTime
    quantity       Float
    unit           UnitType     @default(KG)
    Fertilizer     Fertilizer   @relation(fields: [fertilizerId], references: [id])
    Distribution   Distribution @relation(fields: [distributionId], references: [id], onDelete: Cascade)
}

model DistributionBatch {
    id           Int            @id @default(autoincrement())
    year         String //Year of season
    season       String // DRY or WET season
    who          String
    what         String
    when         String
    where        String
    why          String
    Distributions Distribution[]
}

model Distribution {
    id                     String                   @id @default(uuid())
    distributionBatchId    Int
    farmId                 String
    year                   String //Year of season
    season                 String // DRY or WET season
    Farm                   Farm                     @relation(fields: [farmId], references: [id])
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime?                @updatedAt
    DistributionBatch      DistributionBatch        @relation(fields: [distributionBatchId], references: [id], onDelete: Cascade)
    Planting               Planting[]
    CropDistribution       CropDistribution[]
    FertilizerDistribution FertilizerDistribution[]

    @@unique([farmId, year, season])
}

model Planting {
    id                  String           @id @default(uuid())
    distributionId      String
    distributedCropId   Int
    establishmentType   String //Transplanted, Direct Wet Seeded, Direct Dry Seeded
    dateOfSowing        DateTime
    dateOfTransplant    DateTime?
    expectedHarvestDate DateTime
    actualHarvestDate   DateTime?
    plantedArea         Float? // hectares
    moistureContent     Float? // e.g., 22.5 (percent)
    plantedQuantity     Float //kg
    plantedUnit         UnitType         @default(KG)
    harvestedQuantity   Float?
    harvestedUnit       UnitType?        @default(KG)
    Distribution        Distribution     @relation(fields: [distributionId], references: [id], onDelete: Cascade)
    CropDistribution    CropDistribution @relation(fields: [distributedCropId], references: [id], onDelete: Cascade)
}

model FarmImage {
    id         String   @id @default(uuid())
    farmId     String
    url        String
    caption    String?
    order      Int?
    isFeatured Boolean?
    uploadedAt DateTime @default(now())
    Farm       Farm     @relation(fields: [farmId], references: [id])
}

model News {
    id        Int         @id @default(autoincrement())
    title     String
    content   String
    postedAt  DateTime    @default(now())
    updatedAt DateTime?   @updatedAt
    NewsImage NewsImage[]
}

model NewsImage {
    id         String   @id @default(uuid())
    newsId     Int
    url        String
    createdAt  DateTime @default(now())
    News       News     @relation(fields: [newsId], references: [id])
}

enum DistributionType {
    SEED
    SEEDLING
}

enum UnitType {
    KG
    CAVAN
    MT
}
